
Task2_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00000e3c  00000ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080022a  0080022a  00000efa  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  00004d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000222  00000000  00000000  0000593f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  00005b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000060c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00006234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000397  00000000  00000000  000064c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
   4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
   8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	lds	r29, 0x78
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	sts	0xb8, r17
  f2:	ba ab       	sts	0x5a, r27
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	sts	0x9b, r26
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	sts	0x5e, r27
 126:	aa aa       	sts	0x9a, r26
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	sts	0x41, r30
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <__fp_round+0x1e>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
 176:	12 e0       	ldi	r17, 0x02	; 2
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b2 e0       	ldi	r27, 0x02	; 2
 17c:	ec e3       	ldi	r30, 0x3C	; 60
 17e:	fe e0       	ldi	r31, 0x0E	; 14
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	0b bf       	out	0x3b, r16	; 59
 184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
 186:	07 90       	elpm	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	aa 32       	cpi	r26, 0x2A	; 42
 18c:	b1 07       	cpc	r27, r17
 18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
 190:	12 e0       	ldi	r17, 0x02	; 2
 192:	aa e2       	ldi	r26, 0x2A	; 42
 194:	b2 e0       	ldi	r27, 0x02	; 2
 196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
 198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
 19a:	a1 34       	cpi	r26, 0x41	; 65
 19c:	b1 07       	cpc	r27, r17
 19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
 1a0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <main>
 1a4:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <_exit>

000001a8 <__bad_interrupt>:
 1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_port_config>:
unsigned int million;

/* Function to configure LCD port*/
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 1ac:	87 b1       	in	r24, 0x07	; 7
 1ae:	87 6f       	ori	r24, 0xF7	; 247
 1b0:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	80 78       	andi	r24, 0x80	; 128
 1b6:	88 b9       	out	0x08, r24	; 8
}
 1b8:	08 95       	ret

000001ba <lcd_init_devices>:


//init device
void lcd_init_devices()
{
	cli();    //clears the global interrupts
 1ba:	f8 94       	cli
	lcd_port_config();
 1bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_port_config>
	sei();   //Enable the global interrupts
 1c0:	78 94       	sei
}
 1c2:	08 95       	ret

000001c4 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	86 e6       	ldi	r24, 0x66	; 102
 1c6:	9e e0       	ldi	r25, 0x0E	; 14
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_set_4bit+0x4>
 1cc:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1ce:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1d0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 1d2:	80 e3       	ldi	r24, 0x30	; 48
 1d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1d6:	42 9a       	sbi	0x08, 2	; 8
 1d8:	ef ef       	ldi	r30, 0xFF	; 255
 1da:	f7 e4       	ldi	r31, 0x47	; 71
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_set_4bit+0x18>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_set_4bit+0x1e>
 1e2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1e4:	42 98       	cbi	0x08, 2	; 8
 1e6:	e6 e6       	ldi	r30, 0x66	; 102
 1e8:	fe e0       	ldi	r31, 0x0E	; 14
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_set_4bit+0x26>
 1ee:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1f2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 1f4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1f6:	42 9a       	sbi	0x08, 2	; 8
 1f8:	ef ef       	ldi	r30, 0xFF	; 255
 1fa:	f7 e4       	ldi	r31, 0x47	; 71
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_set_4bit+0x38>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_set_4bit+0x3e>
 202:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 204:	42 98       	cbi	0x08, 2	; 8
 206:	e6 e6       	ldi	r30, 0x66	; 102
 208:	fe e0       	ldi	r31, 0x0E	; 14
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_set_4bit+0x46>
 20e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 210:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 212:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 214:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 216:	42 9a       	sbi	0x08, 2	; 8
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	97 e4       	ldi	r25, 0x47	; 71
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_set_4bit+0x58>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_set_4bit+0x5e>
 222:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 224:	42 98       	cbi	0x08, 2	; 8
 226:	e6 e6       	ldi	r30, 0x66	; 102
 228:	fe e0       	ldi	r31, 0x0E	; 14
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_set_4bit+0x66>
 22e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 230:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 232:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 238:	42 9a       	sbi	0x08, 2	; 8
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	97 e4       	ldi	r25, 0x47	; 71
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_set_4bit+0x7a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_set_4bit+0x80>
 244:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 246:	42 98       	cbi	0x08, 2	; 8

	
}
 248:	08 95       	ret

0000024a <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 24a:	98 b1       	in	r25, 0x08	; 8
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 250:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 252:	28 2f       	mov	r18, r24
 254:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 256:	92 2b       	or	r25, r18
 258:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 25a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 25e:	42 9a       	sbi	0x08, 2	; 8
 260:	ef ef       	ldi	r30, 0xFF	; 255
 262:	f7 e4       	ldi	r31, 0x47	; 71
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_wr_command+0x1a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_wr_command+0x20>
 26a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 26e:	98 b1       	in	r25, 0x08	; 8
 270:	9f 70       	andi	r25, 0x0F	; 15
 272:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 274:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 276:	82 95       	swap	r24
 278:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 27a:	89 2b       	or	r24, r25
 27c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 27e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 280:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 282:	42 9a       	sbi	0x08, 2	; 8
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	97 e4       	ldi	r25, 0x47	; 71
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_wr_command+0x3e>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_wr_command+0x44>
 28e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 290:	42 98       	cbi	0x08, 2	; 8
}
 292:	08 95       	ret

00000294 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 294:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_set_4bit>
 298:	86 e6       	ldi	r24, 0x66	; 102
 29a:	9e e0       	ldi	r25, 0x0E	; 14
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x8>
 2a0:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
	lcd_wr_command(0x01);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
	lcd_wr_command(0x06);
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
	lcd_wr_command(0x0E);
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
	lcd_wr_command(0x80);
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
		
}
 2c0:	08 95       	ret

000002c2 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 2c2:	98 b1       	in	r25, 0x08	; 8
 2c4:	9f 70       	andi	r25, 0x0F	; 15
 2c6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 2c8:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 2ca:	28 2f       	mov	r18, r24
 2cc:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 2ce:	92 2b       	or	r25, r18
 2d0:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 2d2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 2d4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 2d6:	42 9a       	sbi	0x08, 2	; 8
 2d8:	ef ef       	ldi	r30, 0xFF	; 255
 2da:	f7 e4       	ldi	r31, 0x47	; 71
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_wr_char+0x1a>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_wr_char+0x20>
 2e2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 2e4:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 2e6:	98 b1       	in	r25, 0x08	; 8
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 2ec:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 2ee:	82 95       	swap	r24
 2f0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 2f2:	89 2b       	or	r24, r25
 2f4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 2f6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 2f8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 2fa:	42 9a       	sbi	0x08, 2	; 8
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	97 e4       	ldi	r25, 0x47	; 71
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_wr_char+0x3e>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lcd_wr_char+0x44>
 306:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 308:	42 98       	cbi	0x08, 2	; 8
}
 30a:	08 95       	ret

0000030c <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
}
 312:	08 95       	ret

00000314 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
	while(*str != '\0')
 31a:	88 81       	ld	r24, Y
 31c:	88 23       	and	r24, r24
 31e:	31 f0       	breq	.+12     	; 0x32c <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 320:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 326:	89 91       	ld	r24, Y+
 328:	88 23       	and	r24, r24
 32a:	d9 f7       	brne	.-10     	; 0x322 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	79 f0       	breq	.+30     	; 0x354 <lcd_cursor+0x22>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	18 f4       	brcc	.+6      	; 0x340 <lcd_cursor+0xe>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	c9 f4       	brne	.+50     	; 0x370 <lcd_cursor+0x3e>
 33e:	05 c0       	rjmp	.+10     	; 0x34a <lcd_cursor+0x18>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	69 f0       	breq	.+26     	; 0x35e <lcd_cursor+0x2c>
 344:	84 30       	cpi	r24, 0x04	; 4
 346:	a1 f4       	brne	.+40     	; 0x370 <lcd_cursor+0x3e>
 348:	0f c0       	rjmp	.+30     	; 0x368 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 34a:	86 2f       	mov	r24, r22
 34c:	81 58       	subi	r24, 0x81	; 129
 34e:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
 352:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 354:	86 2f       	mov	r24, r22
 356:	81 54       	subi	r24, 0x41	; 65
 358:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
 35c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 35e:	86 2f       	mov	r24, r22
 360:	8d 56       	subi	r24, 0x6D	; 109
 362:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
 366:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 368:	86 2f       	mov	r24, r22
 36a:	8d 52       	subi	r24, 0x2D	; 45
 36c:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_wr_command>
 370:	08 95       	ret

00000372 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	8a 01       	movw	r16, r20
 37c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 37e:	88 23       	and	r24, r24
 380:	11 f0       	breq	.+4      	; 0x386 <lcd_print+0x14>
 382:	66 23       	and	r22, r22
 384:	19 f4       	brne	.+6      	; 0x38c <lcd_print+0x1a>
	{
		lcd_home();
 386:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_home>
 38a:	02 c0       	rjmp	.+4      	; 0x390 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 38c:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 390:	c5 30       	cpi	r28, 0x05	; 5
 392:	d1 05       	cpc	r29, r1
 394:	71 f4       	brne	.+28     	; 0x3b2 <lcd_print+0x40>
	{
		million=value/10000+48;
 396:	c8 01       	movw	r24, r16
 398:	60 e1       	ldi	r22, 0x10	; 16
 39a:	77 e2       	ldi	r23, 0x27	; 39
 39c:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 3a0:	cb 01       	movw	r24, r22
 3a2:	c0 96       	adiw	r24, 0x30	; 48
 3a4:	90 93 2b 02 	sts	0x022B, r25
 3a8:	80 93 2a 02 	sts	0x022A, r24
		lcd_wr_char(million);
 3ac:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 3b2:	c4 30       	cpi	r28, 0x04	; 4
 3b4:	d1 05       	cpc	r29, r1
 3b6:	b9 f4       	brne	.+46     	; 0x3e6 <lcd_print+0x74>
	{
		temp = value/1000;
 3b8:	c8 01       	movw	r24, r16
 3ba:	68 ee       	ldi	r22, 0xE8	; 232
 3bc:	73 e0       	ldi	r23, 0x03	; 3
 3be:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 3c2:	cb 01       	movw	r24, r22
 3c4:	70 93 2f 02 	sts	0x022F, r23
 3c8:	60 93 2e 02 	sts	0x022E, r22
		thousand = temp%10 + 48;
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 3d4:	c0 96       	adiw	r24, 0x30	; 48
 3d6:	90 93 3e 02 	sts	0x023E, r25
 3da:	80 93 3d 02 	sts	0x023D, r24
		lcd_wr_char(thousand);
 3de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>
		flag=1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 3e8:	c3 30       	cpi	r28, 0x03	; 3
 3ea:	d1 05       	cpc	r29, r1
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <lcd_print+0x80>
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	b1 f4       	brne	.+44     	; 0x41e <lcd_print+0xac>
	{
		temp = value/100;
 3f2:	c8 01       	movw	r24, r16
 3f4:	64 e6       	ldi	r22, 0x64	; 100
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 3fc:	cb 01       	movw	r24, r22
 3fe:	70 93 2f 02 	sts	0x022F, r23
 402:	60 93 2e 02 	sts	0x022E, r22
		hundred = temp%10 + 48;
 406:	6a e0       	ldi	r22, 0x0A	; 10
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 40e:	c0 96       	adiw	r24, 0x30	; 48
 410:	90 93 3a 02 	sts	0x023A, r25
 414:	80 93 39 02 	sts	0x0239, r24
		lcd_wr_char(hundred);
 418:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>
		flag=1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 41e:	c2 30       	cpi	r28, 0x02	; 2
 420:	d1 05       	cpc	r29, r1
 422:	11 f0       	breq	.+4      	; 0x428 <lcd_print+0xb6>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	b1 f4       	brne	.+44     	; 0x454 <lcd_print+0xe2>
	{
		temp = value/10;
 428:	2a e0       	ldi	r18, 0x0A	; 10
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	c8 01       	movw	r24, r16
 42e:	b9 01       	movw	r22, r18
 430:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 434:	cb 01       	movw	r24, r22
 436:	70 93 2f 02 	sts	0x022F, r23
 43a:	60 93 2e 02 	sts	0x022E, r22
		tens = temp%10 + 48;
 43e:	b9 01       	movw	r22, r18
 440:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 444:	c0 96       	adiw	r24, 0x30	; 48
 446:	90 93 36 02 	sts	0x0236, r25
 44a:	80 93 35 02 	sts	0x0235, r24
		lcd_wr_char(tens);
 44e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>
		flag=1;
 452:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 454:	c1 30       	cpi	r28, 0x01	; 1
 456:	d1 05       	cpc	r29, r1
 458:	11 f0       	breq	.+4      	; 0x45e <lcd_print+0xec>
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	61 f4       	brne	.+24     	; 0x476 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 45e:	c8 01       	movw	r24, r16
 460:	6a e0       	ldi	r22, 0x0A	; 10
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodhi4>
 468:	c0 96       	adiw	r24, 0x30	; 48
 46a:	90 93 3c 02 	sts	0x023C, r25
 46e:	80 93 3b 02 	sts	0x023B, r24
		lcd_wr_char(unit);
 472:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>
	}
	if(digits>5)
 476:	c6 30       	cpi	r28, 0x06	; 6
 478:	d1 05       	cpc	r29, r1
 47a:	1c f0       	brlt	.+6      	; 0x482 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 47c:	85 e4       	ldi	r24, 0x45	; 69
 47e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_wr_char>
	}
	
}
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <adc_pin_config>:
unsigned int value0,value1,value2;

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00; //set PORTF direction as input
 48c:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00; //set PORTF pins floating
 48e:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00; //set PORTK direction as input
 490:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
 494:	10 92 08 01 	sts	0x0108, r1
}
 498:	08 95       	ret

0000049a <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 49a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_port_config>
	adc_pin_config();
 49e:	0e 94 46 02 	call	0x48c	; 0x48c <adc_pin_config>
}
 4a2:	08 95       	ret

000004a4 <adc_init>:


//Function to Initialize ADC
void adc_init()
{
	ADCSRA = 0x00;
 4a4:	ea e7       	ldi	r30, 0x7A	; 122
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 4aa:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 4b8:	86 e8       	ldi	r24, 0x86	; 134
 4ba:	80 83       	st	Z, r24
}
 4bc:	08 95       	ret

000004be <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 4be:	88 30       	cpi	r24, 0x08	; 8
 4c0:	18 f0       	brcs	.+6      	; 0x4c8 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 4c2:	98 e0       	ldi	r25, 0x08	; 8
 4c4:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
 4c8:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4d0:	ea e7       	ldi	r30, 0x7A	; 122
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	80 64       	ori	r24, 0x40	; 64
 4d8:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 4da:	80 81       	ld	r24, Z
 4dc:	84 ff       	sbrs	r24, 4
 4de:	fd cf       	rjmp	.-6      	; 0x4da <ADC_Conversion+0x1c>
	a=ADCH;
 4e0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4e4:	ea e7       	ldi	r30, 0x7A	; 122
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	90 81       	ld	r25, Z
 4ea:	90 61       	ori	r25, 0x10	; 16
 4ec:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 4ee:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 4f2:	08 95       	ret

000004f4 <print_sensor>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location.
void print_sensor(char row, char coloumn,unsigned char channel)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	d8 2f       	mov	r29, r24
 4fa:	c6 2f       	mov	r28, r22
 4fc:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
 4fe:	0e 94 5f 02 	call	0x4be	; 0x4be <ADC_Conversion>
 502:	48 2f       	mov	r20, r24
 504:	80 93 33 02 	sts	0x0233, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 508:	8d 2f       	mov	r24, r29
 50a:	6c 2f       	mov	r22, r28
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	23 e0       	ldi	r18, 0x03	; 3
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_print>
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <Sharp_GP2D12_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor.
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
 520:	68 2f       	mov	r22, r24
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatunsisf>
 52c:	2f ee       	ldi	r18, 0xEF	; 239
 52e:	39 ec       	ldi	r19, 0xC9	; 201
 530:	43 e9       	ldi	r20, 0x93	; 147
 532:	5f e3       	ldi	r21, 0x3F	; 63
 534:	0e 94 3e 05 	call	0xa7c	; 0xa7c <pow>
 538:	b6 2f       	mov	r27, r22
 53a:	a7 2f       	mov	r26, r23
 53c:	38 2f       	mov	r19, r24
 53e:	29 2f       	mov	r18, r25
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 e8       	ldi	r24, 0x80	; 128
 546:	9f e3       	ldi	r25, 0x3F	; 63
 548:	42 2f       	mov	r20, r18
 54a:	0b 2f       	mov	r16, r27
 54c:	1a 2f       	mov	r17, r26
 54e:	23 2f       	mov	r18, r19
 550:	34 2f       	mov	r19, r20
 552:	a9 01       	movw	r20, r18
 554:	98 01       	movw	r18, r16
 556:	0e 94 b4 03 	call	0x768	; 0x768 <__divsf3>
 55a:	2a e9       	ldi	r18, 0x9A	; 154
 55c:	39 ef       	ldi	r19, 0xF9	; 249
 55e:	4e e2       	ldi	r20, 0x2E	; 46
 560:	55 e4       	ldi	r21, 0x45	; 69
 562:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
 566:	20 e0       	ldi	r18, 0x00	; 0
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	40 e2       	ldi	r20, 0x20	; 32
 56c:	51 e4       	ldi	r21, 0x41	; 65
 56e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__mulsf3>
 572:	0e 94 1c 04 	call	0x838	; 0x838 <__fixsfsi>
 576:	88 27       	eor	r24, r24
 578:	77 fd       	sbrc	r23, 7
 57a:	80 95       	com	r24
 57c:	98 2f       	mov	r25, r24
 57e:	0e 94 4f 04 	call	0x89e	; 0x89e <__floatsisf>
	distanceInt = (int)distance;
 582:	0e 94 1c 04 	call	0x838	; 0x838 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
 586:	86 2f       	mov	r24, r22
 588:	97 2f       	mov	r25, r23
 58a:	23 e0       	ldi	r18, 0x03	; 3
 58c:	81 32       	cpi	r24, 0x21	; 33
 58e:	92 07       	cpc	r25, r18
 590:	10 f0       	brcs	.+4      	; 0x596 <Sharp_GP2D12_estimation+0x7a>
 592:	80 e2       	ldi	r24, 0x20	; 32
 594:	93 e0       	ldi	r25, 0x03	; 3
}
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
 59c:	f8 94       	cli
	port_init();
 59e:	0e 94 4d 02 	call	0x49a	; 0x49a <port_init>
	adc_init();
 5a2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <adc_init>
	sei(); //Enables the global interrupts
 5a6:	78 94       	sei
}
 5a8:	08 95       	ret

000005aa <main>:


int main(void)
{
	unsigned int value;
	init_devices();
 5aa:	0e 94 ce 02 	call	0x59c	; 0x59c <init_devices>
	
	lcd_set_4bit();
 5ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_set_4bit>
	lcd_init();
 5b2:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_init>
		value2 = Sharp_GP2D12_estimation(sharp2);			//Stores Distance calsulated in a variable "value".
		lcd_print(2,13,value2,3); 							//Prints Value Of Distanc in MM measured by Sharp Sensor.
		if(value0<120 && value1<300 && value2>350)
		{
			lcd_cursor(1,3);
			lcd_string("BLOCK C");
 5b6:	00 e0       	ldi	r16, 0x00	; 0
 5b8:	12 e0       	ldi	r17, 0x02	; 2
			lcd_string("        ");
		}
		else
		{
			lcd_cursor(1,3);
			lcd_string("        ");
 5ba:	c0 e2       	ldi	r28, 0x20	; 32
 5bc:	d2 e0       	ldi	r29, 0x02	; 2
			lcd_string("BLOCK B");
		}
		else if(value0<120 && value1<300 && value2<300 && value1<750)
		{
			lcd_cursor(1,3);
			lcd_string("BLOCK D");
 5be:	0f 2e       	mov	r0, r31
 5c0:	f8 e1       	ldi	r31, 0x18	; 24
 5c2:	af 2e       	mov	r10, r31
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	bf 2e       	mov	r11, r31
 5c8:	f0 2d       	mov	r31, r0
			lcd_string("BLOCK A");
		}
		else if(value0>135 && value1<300 && value2<300 && value1<750)
		{
			lcd_cursor(1,3);
			lcd_string("BLOCK B");
 5ca:	0f 2e       	mov	r0, r31
 5cc:	f0 e1       	ldi	r31, 0x10	; 16
 5ce:	cf 2e       	mov	r12, r31
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	df 2e       	mov	r13, r31
 5d4:	f0 2d       	mov	r31, r0
			lcd_string("BLOCK C");
		}	
		else if(value0>135 && value1<300 && value2>350)
		{
			lcd_cursor(1,3);
			lcd_string("BLOCK A");
 5d6:	0f 2e       	mov	r0, r31
 5d8:	f8 e0       	ldi	r31, 0x08	; 8
 5da:	ef 2e       	mov	r14, r31
 5dc:	f2 e0       	ldi	r31, 0x02	; 2
 5de:	ff 2e       	mov	r15, r31
 5e0:	f0 2d       	mov	r31, r0
	
    while(1)
    {
		
		//Prints value of Analog IR Proximity Sensor 3
		value0 =ADC_Conversion(6);
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	0e 94 5f 02 	call	0x4be	; 0x4be <ADC_Conversion>
 5e8:	48 2f       	mov	r20, r24
 5ea:	80 93 30 02 	sts	0x0230, r24
 5ee:	10 92 31 02 	sts	0x0231, r1
		/*print_sensor(2,2,6);*/
		lcd_print(2,2,value0,3); 							//Prints Value Of Distanc in MM measured by Sharp Sensor.
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	62 e0       	ldi	r22, 0x02	; 2
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	23 e0       	ldi	r18, 0x03	; 3
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_print>
		
		sharp1 = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 600:	8a e0       	ldi	r24, 0x0A	; 10
 602:	0e 94 5f 02 	call	0x4be	; 0x4be <ADC_Conversion>
 606:	80 93 34 02 	sts	0x0234, r24
		value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
 60a:	0e 94 8e 02 	call	0x51c	; 0x51c <Sharp_GP2D12_estimation>
 60e:	ac 01       	movw	r20, r24
 610:	90 93 40 02 	sts	0x0240, r25
 614:	80 93 3f 02 	sts	0x023F, r24
		lcd_print(2,7,value1,3); 							//Prints Value Of Distanc in MM measured by Sharp Sensor.
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	67 e0       	ldi	r22, 0x07	; 7
 61c:	23 e0       	ldi	r18, 0x03	; 3
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_print>
		
		sharp2 = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 624:	8b e0       	ldi	r24, 0x0B	; 11
 626:	0e 94 5f 02 	call	0x4be	; 0x4be <ADC_Conversion>
 62a:	80 93 2c 02 	sts	0x022C, r24
		value2 = Sharp_GP2D12_estimation(sharp2);			//Stores Distance calsulated in a variable "value".
 62e:	0e 94 8e 02 	call	0x51c	; 0x51c <Sharp_GP2D12_estimation>
 632:	ac 01       	movw	r20, r24
 634:	90 93 38 02 	sts	0x0238, r25
 638:	80 93 37 02 	sts	0x0237, r24
		lcd_print(2,13,value2,3); 							//Prints Value Of Distanc in MM measured by Sharp Sensor.
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	6d e0       	ldi	r22, 0x0D	; 13
 640:	23 e0       	ldi	r18, 0x03	; 3
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	0e 94 b9 01 	call	0x372	; 0x372 <lcd_print>
		if(value0<120 && value1<300 && value2>350)
 648:	40 91 30 02 	lds	r20, 0x0230
 64c:	50 91 31 02 	lds	r21, 0x0231
 650:	48 37       	cpi	r20, 0x78	; 120
 652:	51 05       	cpc	r21, r1
 654:	c0 f4       	brcc	.+48     	; 0x686 <main+0xdc>
 656:	80 91 3f 02 	lds	r24, 0x023F
 65a:	90 91 40 02 	lds	r25, 0x0240
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	8c 32       	cpi	r24, 0x2C	; 44
 662:	92 07       	cpc	r25, r18
 664:	80 f4       	brcc	.+32     	; 0x686 <main+0xdc>
 666:	80 91 37 02 	lds	r24, 0x0237
 66a:	90 91 38 02 	lds	r25, 0x0238
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	8f 35       	cpi	r24, 0x5F	; 95
 672:	96 07       	cpc	r25, r22
 674:	40 f0       	brcs	.+16     	; 0x686 <main+0xdc>
		{
			lcd_cursor(1,3);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	63 e0       	ldi	r22, 0x03	; 3
 67a:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
			lcd_string("BLOCK C");
 67e:	c8 01       	movw	r24, r16
 680:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_string>
 684:	ae cf       	rjmp	.-164    	; 0x5e2 <main+0x38>
		}	
		else if(value0>135 && value1<300 && value2>350)
 686:	48 38       	cpi	r20, 0x88	; 136
 688:	51 05       	cpc	r21, r1
 68a:	28 f1       	brcs	.+74     	; 0x6d6 <main+0x12c>
 68c:	80 91 3f 02 	lds	r24, 0x023F
 690:	90 91 40 02 	lds	r25, 0x0240
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	8c 32       	cpi	r24, 0x2C	; 44
 698:	92 07       	cpc	r25, r18
 69a:	e8 f4       	brcc	.+58     	; 0x6d6 <main+0x12c>
 69c:	20 91 37 02 	lds	r18, 0x0237
 6a0:	30 91 38 02 	lds	r19, 0x0238
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	2f 35       	cpi	r18, 0x5F	; 95
 6a8:	36 07       	cpc	r19, r22
 6aa:	08 f4       	brcc	.+2      	; 0x6ae <main+0x104>
 6ac:	53 c0       	rjmp	.+166    	; 0x754 <main+0x1aa>
		{
			lcd_cursor(1,3);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	63 e0       	ldi	r22, 0x03	; 3
 6b2:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
			lcd_string("BLOCK A");
 6b6:	c7 01       	movw	r24, r14
 6b8:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_string>
 6bc:	92 cf       	rjmp	.-220    	; 0x5e2 <main+0x38>
		}
		else if(value0>135 && value1<300 && value2<300 && value1<750)
 6be:	22 e0       	ldi	r18, 0x02	; 2
 6c0:	8e 3e       	cpi	r24, 0xEE	; 238
 6c2:	92 07       	cpc	r25, r18
 6c4:	40 f4       	brcc	.+16     	; 0x6d6 <main+0x12c>
		{
			lcd_cursor(1,3);
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	63 e0       	ldi	r22, 0x03	; 3
 6ca:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
			lcd_string("BLOCK B");
 6ce:	c6 01       	movw	r24, r12
 6d0:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_string>
 6d4:	86 cf       	rjmp	.-244    	; 0x5e2 <main+0x38>
		}
		else if(value0<120 && value1<300 && value2<300 && value1<750)
 6d6:	48 37       	cpi	r20, 0x78	; 120
 6d8:	51 05       	cpc	r21, r1
 6da:	e0 f4       	brcc	.+56     	; 0x714 <main+0x16a>
 6dc:	80 91 3f 02 	lds	r24, 0x023F
 6e0:	90 91 40 02 	lds	r25, 0x0240
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	8c 32       	cpi	r24, 0x2C	; 44
 6e8:	94 07       	cpc	r25, r20
 6ea:	a0 f4       	brcc	.+40     	; 0x714 <main+0x16a>
 6ec:	20 91 37 02 	lds	r18, 0x0237
 6f0:	30 91 38 02 	lds	r19, 0x0238
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	2c 32       	cpi	r18, 0x2C	; 44
 6f8:	36 07       	cpc	r19, r22
 6fa:	60 f4       	brcc	.+24     	; 0x714 <main+0x16a>
 6fc:	22 e0       	ldi	r18, 0x02	; 2
 6fe:	8e 3e       	cpi	r24, 0xEE	; 238
 700:	92 07       	cpc	r25, r18
 702:	40 f4       	brcc	.+16     	; 0x714 <main+0x16a>
		{
			lcd_cursor(1,3);
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	63 e0       	ldi	r22, 0x03	; 3
 708:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
			lcd_string("BLOCK D");
 70c:	c5 01       	movw	r24, r10
 70e:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_string>
 712:	67 cf       	rjmp	.-306    	; 0x5e2 <main+0x38>
		}	
		else if(value1==800 && value2==800)
 714:	80 91 3f 02 	lds	r24, 0x023F
 718:	90 91 40 02 	lds	r25, 0x0240
 71c:	43 e0       	ldi	r20, 0x03	; 3
 71e:	80 32       	cpi	r24, 0x20	; 32
 720:	94 07       	cpc	r25, r20
 722:	81 f4       	brne	.+32     	; 0x744 <main+0x19a>
 724:	80 91 37 02 	lds	r24, 0x0237
 728:	90 91 38 02 	lds	r25, 0x0238
 72c:	63 e0       	ldi	r22, 0x03	; 3
 72e:	80 32       	cpi	r24, 0x20	; 32
 730:	96 07       	cpc	r25, r22
 732:	41 f4       	brne	.+16     	; 0x744 <main+0x19a>
		{
			lcd_cursor(1,3);
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	63 e0       	ldi	r22, 0x03	; 3
 738:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
			lcd_string("        ");
 73c:	ce 01       	movw	r24, r28
 73e:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_string>
 742:	4f cf       	rjmp	.-354    	; 0x5e2 <main+0x38>
		}
		else
		{
			lcd_cursor(1,3);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	63 e0       	ldi	r22, 0x03	; 3
 748:	0e 94 99 01 	call	0x332	; 0x332 <lcd_cursor>
			lcd_string("        ");
 74c:	ce 01       	movw	r24, r28
 74e:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_string>
 752:	47 cf       	rjmp	.-370    	; 0x5e2 <main+0x38>
		else if(value0>135 && value1<300 && value2>350)
		{
			lcd_cursor(1,3);
			lcd_string("BLOCK A");
		}
		else if(value0>135 && value1<300 && value2<300 && value1<750)
 754:	20 91 37 02 	lds	r18, 0x0237
 758:	30 91 38 02 	lds	r19, 0x0238
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	2c 32       	cpi	r18, 0x2C	; 44
 760:	36 07       	cpc	r19, r22
 762:	08 f4       	brcc	.+2      	; 0x766 <main+0x1bc>
 764:	ac cf       	rjmp	.-168    	; 0x6be <main+0x114>
 766:	b7 cf       	rjmp	.-146    	; 0x6d6 <main+0x12c>

00000768 <__divsf3>:
 768:	0c d0       	rcall	.+24     	; 0x782 <__divsf3x>
 76a:	eb c0       	rjmp	.+470    	; 0x942 <__fp_round>
 76c:	e3 d0       	rcall	.+454    	; 0x934 <__fp_pscB>
 76e:	40 f0       	brcs	.+16     	; 0x780 <__divsf3+0x18>
 770:	da d0       	rcall	.+436    	; 0x926 <__fp_pscA>
 772:	30 f0       	brcs	.+12     	; 0x780 <__divsf3+0x18>
 774:	21 f4       	brne	.+8      	; 0x77e <__divsf3+0x16>
 776:	5f 3f       	cpi	r21, 0xFF	; 255
 778:	19 f0       	breq	.+6      	; 0x780 <__divsf3+0x18>
 77a:	cc c0       	rjmp	.+408    	; 0x914 <__fp_inf>
 77c:	51 11       	cpse	r21, r1
 77e:	15 c1       	rjmp	.+554    	; 0x9aa <__fp_szero>
 780:	cf c0       	rjmp	.+414    	; 0x920 <__fp_nan>

00000782 <__divsf3x>:
 782:	f0 d0       	rcall	.+480    	; 0x964 <__fp_split3>
 784:	98 f3       	brcs	.-26     	; 0x76c <__divsf3+0x4>

00000786 <__divsf3_pse>:
 786:	99 23       	and	r25, r25
 788:	c9 f3       	breq	.-14     	; 0x77c <__divsf3+0x14>
 78a:	55 23       	and	r21, r21
 78c:	b1 f3       	breq	.-20     	; 0x77a <__divsf3+0x12>
 78e:	95 1b       	sub	r25, r21
 790:	55 0b       	sbc	r21, r21
 792:	bb 27       	eor	r27, r27
 794:	aa 27       	eor	r26, r26
 796:	62 17       	cp	r22, r18
 798:	73 07       	cpc	r23, r19
 79a:	84 07       	cpc	r24, r20
 79c:	38 f0       	brcs	.+14     	; 0x7ac <__divsf3_pse+0x26>
 79e:	9f 5f       	subi	r25, 0xFF	; 255
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255
 7a2:	22 0f       	add	r18, r18
 7a4:	33 1f       	adc	r19, r19
 7a6:	44 1f       	adc	r20, r20
 7a8:	aa 1f       	adc	r26, r26
 7aa:	a9 f3       	breq	.-22     	; 0x796 <__divsf3_pse+0x10>
 7ac:	33 d0       	rcall	.+102    	; 0x814 <__divsf3_pse+0x8e>
 7ae:	0e 2e       	mov	r0, r30
 7b0:	3a f0       	brmi	.+14     	; 0x7c0 <__divsf3_pse+0x3a>
 7b2:	e0 e8       	ldi	r30, 0x80	; 128
 7b4:	30 d0       	rcall	.+96     	; 0x816 <__divsf3_pse+0x90>
 7b6:	91 50       	subi	r25, 0x01	; 1
 7b8:	50 40       	sbci	r21, 0x00	; 0
 7ba:	e6 95       	lsr	r30
 7bc:	00 1c       	adc	r0, r0
 7be:	ca f7       	brpl	.-14     	; 0x7b2 <__divsf3_pse+0x2c>
 7c0:	29 d0       	rcall	.+82     	; 0x814 <__divsf3_pse+0x8e>
 7c2:	fe 2f       	mov	r31, r30
 7c4:	27 d0       	rcall	.+78     	; 0x814 <__divsf3_pse+0x8e>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	bb 1f       	adc	r27, r27
 7ce:	26 17       	cp	r18, r22
 7d0:	37 07       	cpc	r19, r23
 7d2:	48 07       	cpc	r20, r24
 7d4:	ab 07       	cpc	r26, r27
 7d6:	b0 e8       	ldi	r27, 0x80	; 128
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__divsf3_pse+0x56>
 7da:	bb 0b       	sbc	r27, r27
 7dc:	80 2d       	mov	r24, r0
 7de:	bf 01       	movw	r22, r30
 7e0:	ff 27       	eor	r31, r31
 7e2:	93 58       	subi	r25, 0x83	; 131
 7e4:	5f 4f       	sbci	r21, 0xFF	; 255
 7e6:	2a f0       	brmi	.+10     	; 0x7f2 <__divsf3_pse+0x6c>
 7e8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ea:	51 05       	cpc	r21, r1
 7ec:	68 f0       	brcs	.+26     	; 0x808 <__divsf3_pse+0x82>
 7ee:	92 c0       	rjmp	.+292    	; 0x914 <__fp_inf>
 7f0:	dc c0       	rjmp	.+440    	; 0x9aa <__fp_szero>
 7f2:	5f 3f       	cpi	r21, 0xFF	; 255
 7f4:	ec f3       	brlt	.-6      	; 0x7f0 <__divsf3_pse+0x6a>
 7f6:	98 3e       	cpi	r25, 0xE8	; 232
 7f8:	dc f3       	brlt	.-10     	; 0x7f0 <__divsf3_pse+0x6a>
 7fa:	86 95       	lsr	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b7 95       	ror	r27
 802:	f7 95       	ror	r31
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c9 f7       	brne	.-14     	; 0x7fa <__divsf3_pse+0x74>
 808:	88 0f       	add	r24, r24
 80a:	91 1d       	adc	r25, r1
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret
 814:	e1 e0       	ldi	r30, 0x01	; 1
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	bb 1f       	adc	r27, r27
 81e:	62 17       	cp	r22, r18
 820:	73 07       	cpc	r23, r19
 822:	84 07       	cpc	r24, r20
 824:	ba 07       	cpc	r27, r26
 826:	20 f0       	brcs	.+8      	; 0x830 <__divsf3_pse+0xaa>
 828:	62 1b       	sub	r22, r18
 82a:	73 0b       	sbc	r23, r19
 82c:	84 0b       	sbc	r24, r20
 82e:	ba 0b       	sbc	r27, r26
 830:	ee 1f       	adc	r30, r30
 832:	88 f7       	brcc	.-30     	; 0x816 <__divsf3_pse+0x90>
 834:	e0 95       	com	r30
 836:	08 95       	ret

00000838 <__fixsfsi>:
 838:	04 d0       	rcall	.+8      	; 0x842 <__fixunssfsi>
 83a:	68 94       	set
 83c:	b1 11       	cpse	r27, r1
 83e:	b5 c0       	rjmp	.+362    	; 0x9aa <__fp_szero>
 840:	08 95       	ret

00000842 <__fixunssfsi>:
 842:	98 d0       	rcall	.+304    	; 0x974 <__fp_splitA>
 844:	88 f0       	brcs	.+34     	; 0x868 <__fixunssfsi+0x26>
 846:	9f 57       	subi	r25, 0x7F	; 127
 848:	90 f0       	brcs	.+36     	; 0x86e <__fixunssfsi+0x2c>
 84a:	b9 2f       	mov	r27, r25
 84c:	99 27       	eor	r25, r25
 84e:	b7 51       	subi	r27, 0x17	; 23
 850:	a0 f0       	brcs	.+40     	; 0x87a <__fixunssfsi+0x38>
 852:	d1 f0       	breq	.+52     	; 0x888 <__fixunssfsi+0x46>
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	1a f0       	brmi	.+6      	; 0x864 <__fixunssfsi+0x22>
 85e:	ba 95       	dec	r27
 860:	c9 f7       	brne	.-14     	; 0x854 <__fixunssfsi+0x12>
 862:	12 c0       	rjmp	.+36     	; 0x888 <__fixunssfsi+0x46>
 864:	b1 30       	cpi	r27, 0x01	; 1
 866:	81 f0       	breq	.+32     	; 0x888 <__fixunssfsi+0x46>
 868:	9f d0       	rcall	.+318    	; 0x9a8 <__fp_zero>
 86a:	b1 e0       	ldi	r27, 0x01	; 1
 86c:	08 95       	ret
 86e:	9c c0       	rjmp	.+312    	; 0x9a8 <__fp_zero>
 870:	67 2f       	mov	r22, r23
 872:	78 2f       	mov	r23, r24
 874:	88 27       	eor	r24, r24
 876:	b8 5f       	subi	r27, 0xF8	; 248
 878:	39 f0       	breq	.+14     	; 0x888 <__fixunssfsi+0x46>
 87a:	b9 3f       	cpi	r27, 0xF9	; 249
 87c:	cc f3       	brlt	.-14     	; 0x870 <__fixunssfsi+0x2e>
 87e:	86 95       	lsr	r24
 880:	77 95       	ror	r23
 882:	67 95       	ror	r22
 884:	b3 95       	inc	r27
 886:	d9 f7       	brne	.-10     	; 0x87e <__fixunssfsi+0x3c>
 888:	3e f4       	brtc	.+14     	; 0x898 <__fixunssfsi+0x56>
 88a:	90 95       	com	r25
 88c:	80 95       	com	r24
 88e:	70 95       	com	r23
 890:	61 95       	neg	r22
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	08 95       	ret

0000089a <__floatunsisf>:
 89a:	e8 94       	clt
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <__floatsisf+0x12>

0000089e <__floatsisf>:
 89e:	97 fb       	bst	r25, 7
 8a0:	3e f4       	brtc	.+14     	; 0x8b0 <__floatsisf+0x12>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	99 23       	and	r25, r25
 8b2:	a9 f0       	breq	.+42     	; 0x8de <__floatsisf+0x40>
 8b4:	f9 2f       	mov	r31, r25
 8b6:	96 e9       	ldi	r25, 0x96	; 150
 8b8:	bb 27       	eor	r27, r27
 8ba:	93 95       	inc	r25
 8bc:	f6 95       	lsr	r31
 8be:	87 95       	ror	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b7 95       	ror	r27
 8c6:	f1 11       	cpse	r31, r1
 8c8:	f8 cf       	rjmp	.-16     	; 0x8ba <__floatsisf+0x1c>
 8ca:	fa f4       	brpl	.+62     	; 0x90a <__floatsisf+0x6c>
 8cc:	bb 0f       	add	r27, r27
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <__floatsisf+0x36>
 8d0:	60 ff       	sbrs	r22, 0
 8d2:	1b c0       	rjmp	.+54     	; 0x90a <__floatsisf+0x6c>
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	8f 4f       	sbci	r24, 0xFF	; 255
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	16 c0       	rjmp	.+44     	; 0x90a <__floatsisf+0x6c>
 8de:	88 23       	and	r24, r24
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <__floatsisf+0x48>
 8e2:	96 e9       	ldi	r25, 0x96	; 150
 8e4:	11 c0       	rjmp	.+34     	; 0x908 <__floatsisf+0x6a>
 8e6:	77 23       	and	r23, r23
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <__floatsisf+0x54>
 8ea:	9e e8       	ldi	r25, 0x8E	; 142
 8ec:	87 2f       	mov	r24, r23
 8ee:	76 2f       	mov	r23, r22
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <__floatsisf+0x5e>
 8f2:	66 23       	and	r22, r22
 8f4:	71 f0       	breq	.+28     	; 0x912 <__floatsisf+0x74>
 8f6:	96 e8       	ldi	r25, 0x86	; 134
 8f8:	86 2f       	mov	r24, r22
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	2a f0       	brmi	.+10     	; 0x90a <__floatsisf+0x6c>
 900:	9a 95       	dec	r25
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	da f7       	brpl	.-10     	; 0x900 <__floatsisf+0x62>
 90a:	88 0f       	add	r24, r24
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__fp_inf>:
 914:	97 f9       	bld	r25, 7
 916:	9f 67       	ori	r25, 0x7F	; 127
 918:	80 e8       	ldi	r24, 0x80	; 128
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	08 95       	ret

00000920 <__fp_nan>:
 920:	9f ef       	ldi	r25, 0xFF	; 255
 922:	80 ec       	ldi	r24, 0xC0	; 192
 924:	08 95       	ret

00000926 <__fp_pscA>:
 926:	00 24       	eor	r0, r0
 928:	0a 94       	dec	r0
 92a:	16 16       	cp	r1, r22
 92c:	17 06       	cpc	r1, r23
 92e:	18 06       	cpc	r1, r24
 930:	09 06       	cpc	r0, r25
 932:	08 95       	ret

00000934 <__fp_pscB>:
 934:	00 24       	eor	r0, r0
 936:	0a 94       	dec	r0
 938:	12 16       	cp	r1, r18
 93a:	13 06       	cpc	r1, r19
 93c:	14 06       	cpc	r1, r20
 93e:	05 06       	cpc	r0, r21
 940:	08 95       	ret

00000942 <__fp_round>:
 942:	09 2e       	mov	r0, r25
 944:	03 94       	inc	r0
 946:	00 0c       	add	r0, r0
 948:	11 f4       	brne	.+4      	; 0x94e <__fp_round+0xc>
 94a:	88 23       	and	r24, r24
 94c:	52 f0       	brmi	.+20     	; 0x962 <__fp_round+0x20>
 94e:	bb 0f       	add	r27, r27
 950:	40 f4       	brcc	.+16     	; 0x962 <__fp_round+0x20>
 952:	bf 2b       	or	r27, r31
 954:	11 f4       	brne	.+4      	; 0x95a <__fp_round+0x18>
 956:	60 ff       	sbrs	r22, 0
 958:	04 c0       	rjmp	.+8      	; 0x962 <__fp_round+0x20>
 95a:	6f 5f       	subi	r22, 0xFF	; 255
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	08 95       	ret

00000964 <__fp_split3>:
 964:	57 fd       	sbrc	r21, 7
 966:	90 58       	subi	r25, 0x80	; 128
 968:	44 0f       	add	r20, r20
 96a:	55 1f       	adc	r21, r21
 96c:	59 f0       	breq	.+22     	; 0x984 <__fp_splitA+0x10>
 96e:	5f 3f       	cpi	r21, 0xFF	; 255
 970:	71 f0       	breq	.+28     	; 0x98e <__fp_splitA+0x1a>
 972:	47 95       	ror	r20

00000974 <__fp_splitA>:
 974:	88 0f       	add	r24, r24
 976:	97 fb       	bst	r25, 7
 978:	99 1f       	adc	r25, r25
 97a:	61 f0       	breq	.+24     	; 0x994 <__fp_splitA+0x20>
 97c:	9f 3f       	cpi	r25, 0xFF	; 255
 97e:	79 f0       	breq	.+30     	; 0x99e <__fp_splitA+0x2a>
 980:	87 95       	ror	r24
 982:	08 95       	ret
 984:	12 16       	cp	r1, r18
 986:	13 06       	cpc	r1, r19
 988:	14 06       	cpc	r1, r20
 98a:	55 1f       	adc	r21, r21
 98c:	f2 cf       	rjmp	.-28     	; 0x972 <__fp_split3+0xe>
 98e:	46 95       	lsr	r20
 990:	f1 df       	rcall	.-30     	; 0x974 <__fp_splitA>
 992:	08 c0       	rjmp	.+16     	; 0x9a4 <__fp_splitA+0x30>
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	99 1f       	adc	r25, r25
 99c:	f1 cf       	rjmp	.-30     	; 0x980 <__fp_splitA+0xc>
 99e:	86 95       	lsr	r24
 9a0:	71 05       	cpc	r23, r1
 9a2:	61 05       	cpc	r22, r1
 9a4:	08 94       	sec
 9a6:	08 95       	ret

000009a8 <__fp_zero>:
 9a8:	e8 94       	clt

000009aa <__fp_szero>:
 9aa:	bb 27       	eor	r27, r27
 9ac:	66 27       	eor	r22, r22
 9ae:	77 27       	eor	r23, r23
 9b0:	cb 01       	movw	r24, r22
 9b2:	97 f9       	bld	r25, 7
 9b4:	08 95       	ret

000009b6 <__mulsf3>:
 9b6:	0b d0       	rcall	.+22     	; 0x9ce <__mulsf3x>
 9b8:	c4 cf       	rjmp	.-120    	; 0x942 <__fp_round>
 9ba:	b5 df       	rcall	.-150    	; 0x926 <__fp_pscA>
 9bc:	28 f0       	brcs	.+10     	; 0x9c8 <__mulsf3+0x12>
 9be:	ba df       	rcall	.-140    	; 0x934 <__fp_pscB>
 9c0:	18 f0       	brcs	.+6      	; 0x9c8 <__mulsf3+0x12>
 9c2:	95 23       	and	r25, r21
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <__mulsf3+0x12>
 9c6:	a6 cf       	rjmp	.-180    	; 0x914 <__fp_inf>
 9c8:	ab cf       	rjmp	.-170    	; 0x920 <__fp_nan>
 9ca:	11 24       	eor	r1, r1
 9cc:	ee cf       	rjmp	.-36     	; 0x9aa <__fp_szero>

000009ce <__mulsf3x>:
 9ce:	ca df       	rcall	.-108    	; 0x964 <__fp_split3>
 9d0:	a0 f3       	brcs	.-24     	; 0x9ba <__mulsf3+0x4>

000009d2 <__mulsf3_pse>:
 9d2:	95 9f       	mul	r25, r21
 9d4:	d1 f3       	breq	.-12     	; 0x9ca <__mulsf3+0x14>
 9d6:	95 0f       	add	r25, r21
 9d8:	50 e0       	ldi	r21, 0x00	; 0
 9da:	55 1f       	adc	r21, r21
 9dc:	62 9f       	mul	r22, r18
 9de:	f0 01       	movw	r30, r0
 9e0:	72 9f       	mul	r23, r18
 9e2:	bb 27       	eor	r27, r27
 9e4:	f0 0d       	add	r31, r0
 9e6:	b1 1d       	adc	r27, r1
 9e8:	63 9f       	mul	r22, r19
 9ea:	aa 27       	eor	r26, r26
 9ec:	f0 0d       	add	r31, r0
 9ee:	b1 1d       	adc	r27, r1
 9f0:	aa 1f       	adc	r26, r26
 9f2:	64 9f       	mul	r22, r20
 9f4:	66 27       	eor	r22, r22
 9f6:	b0 0d       	add	r27, r0
 9f8:	a1 1d       	adc	r26, r1
 9fa:	66 1f       	adc	r22, r22
 9fc:	82 9f       	mul	r24, r18
 9fe:	22 27       	eor	r18, r18
 a00:	b0 0d       	add	r27, r0
 a02:	a1 1d       	adc	r26, r1
 a04:	62 1f       	adc	r22, r18
 a06:	73 9f       	mul	r23, r19
 a08:	b0 0d       	add	r27, r0
 a0a:	a1 1d       	adc	r26, r1
 a0c:	62 1f       	adc	r22, r18
 a0e:	83 9f       	mul	r24, r19
 a10:	a0 0d       	add	r26, r0
 a12:	61 1d       	adc	r22, r1
 a14:	22 1f       	adc	r18, r18
 a16:	74 9f       	mul	r23, r20
 a18:	33 27       	eor	r19, r19
 a1a:	a0 0d       	add	r26, r0
 a1c:	61 1d       	adc	r22, r1
 a1e:	23 1f       	adc	r18, r19
 a20:	84 9f       	mul	r24, r20
 a22:	60 0d       	add	r22, r0
 a24:	21 1d       	adc	r18, r1
 a26:	82 2f       	mov	r24, r18
 a28:	76 2f       	mov	r23, r22
 a2a:	6a 2f       	mov	r22, r26
 a2c:	11 24       	eor	r1, r1
 a2e:	9f 57       	subi	r25, 0x7F	; 127
 a30:	50 40       	sbci	r21, 0x00	; 0
 a32:	8a f0       	brmi	.+34     	; 0xa56 <__mulsf3_pse+0x84>
 a34:	e1 f0       	breq	.+56     	; 0xa6e <__mulsf3_pse+0x9c>
 a36:	88 23       	and	r24, r24
 a38:	4a f0       	brmi	.+18     	; 0xa4c <__mulsf3_pse+0x7a>
 a3a:	ee 0f       	add	r30, r30
 a3c:	ff 1f       	adc	r31, r31
 a3e:	bb 1f       	adc	r27, r27
 a40:	66 1f       	adc	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	91 50       	subi	r25, 0x01	; 1
 a48:	50 40       	sbci	r21, 0x00	; 0
 a4a:	a9 f7       	brne	.-22     	; 0xa36 <__mulsf3_pse+0x64>
 a4c:	9e 3f       	cpi	r25, 0xFE	; 254
 a4e:	51 05       	cpc	r21, r1
 a50:	70 f0       	brcs	.+28     	; 0xa6e <__mulsf3_pse+0x9c>
 a52:	60 cf       	rjmp	.-320    	; 0x914 <__fp_inf>
 a54:	aa cf       	rjmp	.-172    	; 0x9aa <__fp_szero>
 a56:	5f 3f       	cpi	r21, 0xFF	; 255
 a58:	ec f3       	brlt	.-6      	; 0xa54 <__mulsf3_pse+0x82>
 a5a:	98 3e       	cpi	r25, 0xE8	; 232
 a5c:	dc f3       	brlt	.-10     	; 0xa54 <__mulsf3_pse+0x82>
 a5e:	86 95       	lsr	r24
 a60:	77 95       	ror	r23
 a62:	67 95       	ror	r22
 a64:	b7 95       	ror	r27
 a66:	f7 95       	ror	r31
 a68:	e7 95       	ror	r30
 a6a:	9f 5f       	subi	r25, 0xFF	; 255
 a6c:	c1 f7       	brne	.-16     	; 0xa5e <__mulsf3_pse+0x8c>
 a6e:	fe 2b       	or	r31, r30
 a70:	88 0f       	add	r24, r24
 a72:	91 1d       	adc	r25, r1
 a74:	96 95       	lsr	r25
 a76:	87 95       	ror	r24
 a78:	97 f9       	bld	r25, 7
 a7a:	08 95       	ret

00000a7c <pow>:
 a7c:	fa 01       	movw	r30, r20
 a7e:	ee 0f       	add	r30, r30
 a80:	ff 1f       	adc	r31, r31
 a82:	30 96       	adiw	r30, 0x00	; 0
 a84:	21 05       	cpc	r18, r1
 a86:	31 05       	cpc	r19, r1
 a88:	99 f1       	breq	.+102    	; 0xaf0 <pow+0x74>
 a8a:	61 15       	cp	r22, r1
 a8c:	71 05       	cpc	r23, r1
 a8e:	61 f4       	brne	.+24     	; 0xaa8 <pow+0x2c>
 a90:	80 38       	cpi	r24, 0x80	; 128
 a92:	bf e3       	ldi	r27, 0x3F	; 63
 a94:	9b 07       	cpc	r25, r27
 a96:	49 f1       	breq	.+82     	; 0xaea <pow+0x6e>
 a98:	68 94       	set
 a9a:	90 38       	cpi	r25, 0x80	; 128
 a9c:	81 05       	cpc	r24, r1
 a9e:	61 f0       	breq	.+24     	; 0xab8 <pow+0x3c>
 aa0:	80 38       	cpi	r24, 0x80	; 128
 aa2:	bf ef       	ldi	r27, 0xFF	; 255
 aa4:	9b 07       	cpc	r25, r27
 aa6:	41 f0       	breq	.+16     	; 0xab8 <pow+0x3c>
 aa8:	99 23       	and	r25, r25
 aaa:	42 f5       	brpl	.+80     	; 0xafc <pow+0x80>
 aac:	ff 3f       	cpi	r31, 0xFF	; 255
 aae:	e1 05       	cpc	r30, r1
 ab0:	31 05       	cpc	r19, r1
 ab2:	21 05       	cpc	r18, r1
 ab4:	11 f1       	breq	.+68     	; 0xafa <pow+0x7e>
 ab6:	e8 94       	clt
 ab8:	08 94       	sec
 aba:	e7 95       	ror	r30
 abc:	d9 01       	movw	r26, r18
 abe:	aa 23       	and	r26, r26
 ac0:	29 f4       	brne	.+10     	; 0xacc <pow+0x50>
 ac2:	ab 2f       	mov	r26, r27
 ac4:	be 2f       	mov	r27, r30
 ac6:	f8 5f       	subi	r31, 0xF8	; 248
 ac8:	d0 f3       	brcs	.-12     	; 0xabe <pow+0x42>
 aca:	10 c0       	rjmp	.+32     	; 0xaec <pow+0x70>
 acc:	ff 5f       	subi	r31, 0xFF	; 255
 ace:	70 f4       	brcc	.+28     	; 0xaec <pow+0x70>
 ad0:	a6 95       	lsr	r26
 ad2:	e0 f7       	brcc	.-8      	; 0xacc <pow+0x50>
 ad4:	f7 39       	cpi	r31, 0x97	; 151
 ad6:	50 f0       	brcs	.+20     	; 0xaec <pow+0x70>
 ad8:	19 f0       	breq	.+6      	; 0xae0 <pow+0x64>
 ada:	ff 3a       	cpi	r31, 0xAF	; 175
 adc:	38 f4       	brcc	.+14     	; 0xaec <pow+0x70>
 ade:	9f 77       	andi	r25, 0x7F	; 127
 ae0:	9f 93       	push	r25
 ae2:	0c d0       	rcall	.+24     	; 0xafc <pow+0x80>
 ae4:	0f 90       	pop	r0
 ae6:	07 fc       	sbrc	r0, 7
 ae8:	90 58       	subi	r25, 0x80	; 128
 aea:	08 95       	ret
 aec:	3e f0       	brts	.+14     	; 0xafc <pow+0x80>
 aee:	18 cf       	rjmp	.-464    	; 0x920 <__fp_nan>
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	80 e8       	ldi	r24, 0x80	; 128
 af6:	9f e3       	ldi	r25, 0x3F	; 63
 af8:	08 95       	ret
 afa:	4f e7       	ldi	r20, 0x7F	; 127
 afc:	9f 77       	andi	r25, 0x7F	; 127
 afe:	5f 93       	push	r21
 b00:	4f 93       	push	r20
 b02:	3f 93       	push	r19
 b04:	2f 93       	push	r18
 b06:	9e d0       	rcall	.+316    	; 0xc44 <log>
 b08:	2f 91       	pop	r18
 b0a:	3f 91       	pop	r19
 b0c:	4f 91       	pop	r20
 b0e:	5f 91       	pop	r21
 b10:	52 df       	rcall	.-348    	; 0x9b6 <__mulsf3>
 b12:	05 c0       	rjmp	.+10     	; 0xb1e <exp>
 b14:	19 f4       	brne	.+6      	; 0xb1c <pow+0xa0>
 b16:	0e f0       	brts	.+2      	; 0xb1a <pow+0x9e>
 b18:	fd ce       	rjmp	.-518    	; 0x914 <__fp_inf>
 b1a:	46 cf       	rjmp	.-372    	; 0x9a8 <__fp_zero>
 b1c:	01 cf       	rjmp	.-510    	; 0x920 <__fp_nan>

00000b1e <exp>:
 b1e:	2a df       	rcall	.-428    	; 0x974 <__fp_splitA>
 b20:	c8 f3       	brcs	.-14     	; 0xb14 <pow+0x98>
 b22:	96 38       	cpi	r25, 0x86	; 134
 b24:	c0 f7       	brcc	.-16     	; 0xb16 <pow+0x9a>
 b26:	07 f8       	bld	r0, 7
 b28:	0f 92       	push	r0
 b2a:	e8 94       	clt
 b2c:	2b e3       	ldi	r18, 0x3B	; 59
 b2e:	3a ea       	ldi	r19, 0xAA	; 170
 b30:	48 eb       	ldi	r20, 0xB8	; 184
 b32:	5f e7       	ldi	r21, 0x7F	; 127
 b34:	4e df       	rcall	.-356    	; 0x9d2 <__mulsf3_pse>
 b36:	0f 92       	push	r0
 b38:	0f 92       	push	r0
 b3a:	0f 92       	push	r0
 b3c:	4d b7       	in	r20, 0x3d	; 61
 b3e:	5e b7       	in	r21, 0x3e	; 62
 b40:	0f 92       	push	r0
 b42:	c0 d0       	rcall	.+384    	; 0xcc4 <modf>
 b44:	e4 ee       	ldi	r30, 0xE4	; 228
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	16 d0       	rcall	.+44     	; 0xb76 <__fp_powser>
 b4a:	4f 91       	pop	r20
 b4c:	5f 91       	pop	r21
 b4e:	ef 91       	pop	r30
 b50:	ff 91       	pop	r31
 b52:	e5 95       	asr	r30
 b54:	ee 1f       	adc	r30, r30
 b56:	ff 1f       	adc	r31, r31
 b58:	49 f0       	breq	.+18     	; 0xb6c <exp+0x4e>
 b5a:	fe 57       	subi	r31, 0x7E	; 126
 b5c:	e0 68       	ori	r30, 0x80	; 128
 b5e:	44 27       	eor	r20, r20
 b60:	ee 0f       	add	r30, r30
 b62:	44 1f       	adc	r20, r20
 b64:	fa 95       	dec	r31
 b66:	e1 f7       	brne	.-8      	; 0xb60 <exp+0x42>
 b68:	41 95       	neg	r20
 b6a:	55 0b       	sbc	r21, r21
 b6c:	32 d0       	rcall	.+100    	; 0xbd2 <ldexp>
 b6e:	0f 90       	pop	r0
 b70:	07 fe       	sbrs	r0, 7
 b72:	26 c0       	rjmp	.+76     	; 0xbc0 <inverse>
 b74:	08 95       	ret

00000b76 <__fp_powser>:
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	1f 93       	push	r17
 b7c:	0f 93       	push	r16
 b7e:	ff 92       	push	r15
 b80:	ef 92       	push	r14
 b82:	df 92       	push	r13
 b84:	7b 01       	movw	r14, r22
 b86:	8c 01       	movw	r16, r24
 b88:	68 94       	set
 b8a:	05 c0       	rjmp	.+10     	; 0xb96 <__fp_powser+0x20>
 b8c:	da 2e       	mov	r13, r26
 b8e:	ef 01       	movw	r28, r30
 b90:	1e df       	rcall	.-452    	; 0x9ce <__mulsf3x>
 b92:	fe 01       	movw	r30, r28
 b94:	e8 94       	clt
 b96:	a5 91       	lpm	r26, Z+
 b98:	25 91       	lpm	r18, Z+
 b9a:	35 91       	lpm	r19, Z+
 b9c:	45 91       	lpm	r20, Z+
 b9e:	55 91       	lpm	r21, Z+
 ba0:	ae f3       	brts	.-22     	; 0xb8c <__fp_powser+0x16>
 ba2:	ef 01       	movw	r28, r30
 ba4:	d4 d0       	rcall	.+424    	; 0xd4e <__addsf3x>
 ba6:	fe 01       	movw	r30, r28
 ba8:	97 01       	movw	r18, r14
 baa:	a8 01       	movw	r20, r16
 bac:	da 94       	dec	r13
 bae:	79 f7       	brne	.-34     	; 0xb8e <__fp_powser+0x18>
 bb0:	df 90       	pop	r13
 bb2:	ef 90       	pop	r14
 bb4:	ff 90       	pop	r15
 bb6:	0f 91       	pop	r16
 bb8:	1f 91       	pop	r17
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <inverse>:
 bc0:	9b 01       	movw	r18, r22
 bc2:	ac 01       	movw	r20, r24
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	70 e0       	ldi	r23, 0x00	; 0
 bc8:	80 e8       	ldi	r24, 0x80	; 128
 bca:	9f e3       	ldi	r25, 0x3F	; 63
 bcc:	cd cd       	rjmp	.-1126   	; 0x768 <__divsf3>
 bce:	a2 ce       	rjmp	.-700    	; 0x914 <__fp_inf>
 bd0:	11 c1       	rjmp	.+546    	; 0xdf4 <__fp_mpack>

00000bd2 <ldexp>:
 bd2:	d0 de       	rcall	.-608    	; 0x974 <__fp_splitA>
 bd4:	e8 f3       	brcs	.-6      	; 0xbd0 <inverse+0x10>
 bd6:	99 23       	and	r25, r25
 bd8:	d9 f3       	breq	.-10     	; 0xbd0 <inverse+0x10>
 bda:	94 0f       	add	r25, r20
 bdc:	51 1d       	adc	r21, r1
 bde:	bb f3       	brvs	.-18     	; 0xbce <inverse+0xe>
 be0:	91 50       	subi	r25, 0x01	; 1
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	94 f0       	brlt	.+36     	; 0xc0a <ldexp+0x38>
 be6:	59 f0       	breq	.+22     	; 0xbfe <ldexp+0x2c>
 be8:	88 23       	and	r24, r24
 bea:	32 f0       	brmi	.+12     	; 0xbf8 <ldexp+0x26>
 bec:	66 0f       	add	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	91 50       	subi	r25, 0x01	; 1
 bf4:	50 40       	sbci	r21, 0x00	; 0
 bf6:	c1 f7       	brne	.-16     	; 0xbe8 <ldexp+0x16>
 bf8:	9e 3f       	cpi	r25, 0xFE	; 254
 bfa:	51 05       	cpc	r21, r1
 bfc:	44 f7       	brge	.-48     	; 0xbce <inverse+0xe>
 bfe:	88 0f       	add	r24, r24
 c00:	91 1d       	adc	r25, r1
 c02:	96 95       	lsr	r25
 c04:	87 95       	ror	r24
 c06:	97 f9       	bld	r25, 7
 c08:	08 95       	ret
 c0a:	5f 3f       	cpi	r21, 0xFF	; 255
 c0c:	ac f0       	brlt	.+42     	; 0xc38 <ldexp+0x66>
 c0e:	98 3e       	cpi	r25, 0xE8	; 232
 c10:	9c f0       	brlt	.+38     	; 0xc38 <ldexp+0x66>
 c12:	bb 27       	eor	r27, r27
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b7 95       	ror	r27
 c1c:	08 f4       	brcc	.+2      	; 0xc20 <ldexp+0x4e>
 c1e:	b1 60       	ori	r27, 0x01	; 1
 c20:	93 95       	inc	r25
 c22:	c1 f7       	brne	.-16     	; 0xc14 <ldexp+0x42>
 c24:	bb 0f       	add	r27, r27
 c26:	58 f7       	brcc	.-42     	; 0xbfe <ldexp+0x2c>
 c28:	11 f4       	brne	.+4      	; 0xc2e <ldexp+0x5c>
 c2a:	60 ff       	sbrs	r22, 0
 c2c:	e8 cf       	rjmp	.-48     	; 0xbfe <ldexp+0x2c>
 c2e:	6f 5f       	subi	r22, 0xFF	; 255
 c30:	7f 4f       	sbci	r23, 0xFF	; 255
 c32:	8f 4f       	sbci	r24, 0xFF	; 255
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	e3 cf       	rjmp	.-58     	; 0xbfe <ldexp+0x2c>
 c38:	b8 ce       	rjmp	.-656    	; 0x9aa <__fp_szero>
 c3a:	0e f0       	brts	.+2      	; 0xc3e <ldexp+0x6c>
 c3c:	db c0       	rjmp	.+438    	; 0xdf4 <__fp_mpack>
 c3e:	70 ce       	rjmp	.-800    	; 0x920 <__fp_nan>
 c40:	68 94       	set
 c42:	68 ce       	rjmp	.-816    	; 0x914 <__fp_inf>

00000c44 <log>:
 c44:	97 de       	rcall	.-722    	; 0x974 <__fp_splitA>
 c46:	c8 f3       	brcs	.-14     	; 0xc3a <ldexp+0x68>
 c48:	99 23       	and	r25, r25
 c4a:	d1 f3       	breq	.-12     	; 0xc40 <ldexp+0x6e>
 c4c:	c6 f3       	brts	.-16     	; 0xc3e <ldexp+0x6c>
 c4e:	df 93       	push	r29
 c50:	cf 93       	push	r28
 c52:	1f 93       	push	r17
 c54:	0f 93       	push	r16
 c56:	ff 92       	push	r15
 c58:	c9 2f       	mov	r28, r25
 c5a:	dd 27       	eor	r29, r29
 c5c:	88 23       	and	r24, r24
 c5e:	2a f0       	brmi	.+10     	; 0xc6a <log+0x26>
 c60:	21 97       	sbiw	r28, 0x01	; 1
 c62:	66 0f       	add	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	da f7       	brpl	.-10     	; 0xc60 <log+0x1c>
 c6a:	20 e0       	ldi	r18, 0x00	; 0
 c6c:	30 e0       	ldi	r19, 0x00	; 0
 c6e:	40 e8       	ldi	r20, 0x80	; 128
 c70:	5f eb       	ldi	r21, 0xBF	; 191
 c72:	9f e3       	ldi	r25, 0x3F	; 63
 c74:	88 39       	cpi	r24, 0x98	; 152
 c76:	20 f0       	brcs	.+8      	; 0xc80 <log+0x3c>
 c78:	80 3e       	cpi	r24, 0xE0	; 224
 c7a:	30 f0       	brcs	.+12     	; 0xc88 <log+0x44>
 c7c:	21 96       	adiw	r28, 0x01	; 1
 c7e:	8f 77       	andi	r24, 0x7F	; 127
 c80:	55 d0       	rcall	.+170    	; 0xd2c <__addsf3>
 c82:	ec e0       	ldi	r30, 0x0C	; 12
 c84:	f1 e0       	ldi	r31, 0x01	; 1
 c86:	03 c0       	rjmp	.+6      	; 0xc8e <log+0x4a>
 c88:	51 d0       	rcall	.+162    	; 0xd2c <__addsf3>
 c8a:	e9 e3       	ldi	r30, 0x39	; 57
 c8c:	f1 e0       	ldi	r31, 0x01	; 1
 c8e:	73 df       	rcall	.-282    	; 0xb76 <__fp_powser>
 c90:	8b 01       	movw	r16, r22
 c92:	be 01       	movw	r22, r28
 c94:	ec 01       	movw	r28, r24
 c96:	fb 2e       	mov	r15, r27
 c98:	6f 57       	subi	r22, 0x7F	; 127
 c9a:	71 09       	sbc	r23, r1
 c9c:	75 95       	asr	r23
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 0b       	sbc	r24, r24
 ca2:	99 0b       	sbc	r25, r25
 ca4:	fc dd       	rcall	.-1032   	; 0x89e <__floatsisf>
 ca6:	28 e1       	ldi	r18, 0x18	; 24
 ca8:	32 e7       	ldi	r19, 0x72	; 114
 caa:	41 e3       	ldi	r20, 0x31	; 49
 cac:	5f e3       	ldi	r21, 0x3F	; 63
 cae:	8f de       	rcall	.-738    	; 0x9ce <__mulsf3x>
 cb0:	af 2d       	mov	r26, r15
 cb2:	98 01       	movw	r18, r16
 cb4:	ae 01       	movw	r20, r28
 cb6:	ff 90       	pop	r15
 cb8:	0f 91       	pop	r16
 cba:	1f 91       	pop	r17
 cbc:	cf 91       	pop	r28
 cbe:	df 91       	pop	r29
 cc0:	46 d0       	rcall	.+140    	; 0xd4e <__addsf3x>
 cc2:	3f ce       	rjmp	.-898    	; 0x942 <__fp_round>

00000cc4 <modf>:
 cc4:	fa 01       	movw	r30, r20
 cc6:	dc 01       	movw	r26, r24
 cc8:	aa 0f       	add	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	9b 01       	movw	r18, r22
 cce:	ac 01       	movw	r20, r24
 cd0:	bf 57       	subi	r27, 0x7F	; 127
 cd2:	28 f4       	brcc	.+10     	; 0xcde <modf+0x1a>
 cd4:	22 27       	eor	r18, r18
 cd6:	33 27       	eor	r19, r19
 cd8:	44 27       	eor	r20, r20
 cda:	50 78       	andi	r21, 0x80	; 128
 cdc:	1f c0       	rjmp	.+62     	; 0xd1c <modf+0x58>
 cde:	b7 51       	subi	r27, 0x17	; 23
 ce0:	88 f4       	brcc	.+34     	; 0xd04 <modf+0x40>
 ce2:	ab 2f       	mov	r26, r27
 ce4:	00 24       	eor	r0, r0
 ce6:	46 95       	lsr	r20
 ce8:	37 95       	ror	r19
 cea:	27 95       	ror	r18
 cec:	01 1c       	adc	r0, r1
 cee:	a3 95       	inc	r26
 cf0:	d2 f3       	brmi	.-12     	; 0xce6 <modf+0x22>
 cf2:	00 20       	and	r0, r0
 cf4:	69 f0       	breq	.+26     	; 0xd10 <modf+0x4c>
 cf6:	22 0f       	add	r18, r18
 cf8:	33 1f       	adc	r19, r19
 cfa:	44 1f       	adc	r20, r20
 cfc:	b3 95       	inc	r27
 cfe:	da f3       	brmi	.-10     	; 0xcf6 <modf+0x32>
 d00:	0d d0       	rcall	.+26     	; 0xd1c <modf+0x58>
 d02:	13 c0       	rjmp	.+38     	; 0xd2a <__subsf3>
 d04:	61 30       	cpi	r22, 0x01	; 1
 d06:	71 05       	cpc	r23, r1
 d08:	a0 e8       	ldi	r26, 0x80	; 128
 d0a:	8a 07       	cpc	r24, r26
 d0c:	b9 46       	sbci	r27, 0x69	; 105
 d0e:	30 f4       	brcc	.+12     	; 0xd1c <modf+0x58>
 d10:	9b 01       	movw	r18, r22
 d12:	ac 01       	movw	r20, r24
 d14:	66 27       	eor	r22, r22
 d16:	77 27       	eor	r23, r23
 d18:	88 27       	eor	r24, r24
 d1a:	90 78       	andi	r25, 0x80	; 128
 d1c:	30 96       	adiw	r30, 0x00	; 0
 d1e:	21 f0       	breq	.+8      	; 0xd28 <modf+0x64>
 d20:	20 83       	st	Z, r18
 d22:	31 83       	std	Z+1, r19	; 0x01
 d24:	42 83       	std	Z+2, r20	; 0x02
 d26:	53 83       	std	Z+3, r21	; 0x03
 d28:	08 95       	ret

00000d2a <__subsf3>:
 d2a:	50 58       	subi	r21, 0x80	; 128

00000d2c <__addsf3>:
 d2c:	bb 27       	eor	r27, r27
 d2e:	aa 27       	eor	r26, r26
 d30:	0e d0       	rcall	.+28     	; 0xd4e <__addsf3x>
 d32:	07 ce       	rjmp	.-1010   	; 0x942 <__fp_round>
 d34:	f8 dd       	rcall	.-1040   	; 0x926 <__fp_pscA>
 d36:	30 f0       	brcs	.+12     	; 0xd44 <__addsf3+0x18>
 d38:	fd dd       	rcall	.-1030   	; 0x934 <__fp_pscB>
 d3a:	20 f0       	brcs	.+8      	; 0xd44 <__addsf3+0x18>
 d3c:	31 f4       	brne	.+12     	; 0xd4a <__addsf3+0x1e>
 d3e:	9f 3f       	cpi	r25, 0xFF	; 255
 d40:	11 f4       	brne	.+4      	; 0xd46 <__addsf3+0x1a>
 d42:	1e f4       	brtc	.+6      	; 0xd4a <__addsf3+0x1e>
 d44:	ed cd       	rjmp	.-1062   	; 0x920 <__fp_nan>
 d46:	0e f4       	brtc	.+2      	; 0xd4a <__addsf3+0x1e>
 d48:	e0 95       	com	r30
 d4a:	e7 fb       	bst	r30, 7
 d4c:	e3 cd       	rjmp	.-1082   	; 0x914 <__fp_inf>

00000d4e <__addsf3x>:
 d4e:	e9 2f       	mov	r30, r25
 d50:	09 de       	rcall	.-1006   	; 0x964 <__fp_split3>
 d52:	80 f3       	brcs	.-32     	; 0xd34 <__addsf3+0x8>
 d54:	ba 17       	cp	r27, r26
 d56:	62 07       	cpc	r22, r18
 d58:	73 07       	cpc	r23, r19
 d5a:	84 07       	cpc	r24, r20
 d5c:	95 07       	cpc	r25, r21
 d5e:	18 f0       	brcs	.+6      	; 0xd66 <__addsf3x+0x18>
 d60:	71 f4       	brne	.+28     	; 0xd7e <__addsf3x+0x30>
 d62:	9e f5       	brtc	.+102    	; 0xdca <__addsf3x+0x7c>
 d64:	21 ce       	rjmp	.-958    	; 0x9a8 <__fp_zero>
 d66:	0e f4       	brtc	.+2      	; 0xd6a <__addsf3x+0x1c>
 d68:	e0 95       	com	r30
 d6a:	0b 2e       	mov	r0, r27
 d6c:	ba 2f       	mov	r27, r26
 d6e:	a0 2d       	mov	r26, r0
 d70:	0b 01       	movw	r0, r22
 d72:	b9 01       	movw	r22, r18
 d74:	90 01       	movw	r18, r0
 d76:	0c 01       	movw	r0, r24
 d78:	ca 01       	movw	r24, r20
 d7a:	a0 01       	movw	r20, r0
 d7c:	11 24       	eor	r1, r1
 d7e:	ff 27       	eor	r31, r31
 d80:	59 1b       	sub	r21, r25
 d82:	99 f0       	breq	.+38     	; 0xdaa <__addsf3x+0x5c>
 d84:	59 3f       	cpi	r21, 0xF9	; 249
 d86:	50 f4       	brcc	.+20     	; 0xd9c <__addsf3x+0x4e>
 d88:	50 3e       	cpi	r21, 0xE0	; 224
 d8a:	68 f1       	brcs	.+90     	; 0xde6 <__addsf3x+0x98>
 d8c:	1a 16       	cp	r1, r26
 d8e:	f0 40       	sbci	r31, 0x00	; 0
 d90:	a2 2f       	mov	r26, r18
 d92:	23 2f       	mov	r18, r19
 d94:	34 2f       	mov	r19, r20
 d96:	44 27       	eor	r20, r20
 d98:	58 5f       	subi	r21, 0xF8	; 248
 d9a:	f3 cf       	rjmp	.-26     	; 0xd82 <__addsf3x+0x34>
 d9c:	46 95       	lsr	r20
 d9e:	37 95       	ror	r19
 da0:	27 95       	ror	r18
 da2:	a7 95       	ror	r26
 da4:	f0 40       	sbci	r31, 0x00	; 0
 da6:	53 95       	inc	r21
 da8:	c9 f7       	brne	.-14     	; 0xd9c <__addsf3x+0x4e>
 daa:	7e f4       	brtc	.+30     	; 0xdca <__addsf3x+0x7c>
 dac:	1f 16       	cp	r1, r31
 dae:	ba 0b       	sbc	r27, r26
 db0:	62 0b       	sbc	r22, r18
 db2:	73 0b       	sbc	r23, r19
 db4:	84 0b       	sbc	r24, r20
 db6:	ba f0       	brmi	.+46     	; 0xde6 <__addsf3x+0x98>
 db8:	91 50       	subi	r25, 0x01	; 1
 dba:	a1 f0       	breq	.+40     	; 0xde4 <__addsf3x+0x96>
 dbc:	ff 0f       	add	r31, r31
 dbe:	bb 1f       	adc	r27, r27
 dc0:	66 1f       	adc	r22, r22
 dc2:	77 1f       	adc	r23, r23
 dc4:	88 1f       	adc	r24, r24
 dc6:	c2 f7       	brpl	.-16     	; 0xdb8 <__addsf3x+0x6a>
 dc8:	0e c0       	rjmp	.+28     	; 0xde6 <__addsf3x+0x98>
 dca:	ba 0f       	add	r27, r26
 dcc:	62 1f       	adc	r22, r18
 dce:	73 1f       	adc	r23, r19
 dd0:	84 1f       	adc	r24, r20
 dd2:	48 f4       	brcc	.+18     	; 0xde6 <__addsf3x+0x98>
 dd4:	87 95       	ror	r24
 dd6:	77 95       	ror	r23
 dd8:	67 95       	ror	r22
 dda:	b7 95       	ror	r27
 ddc:	f7 95       	ror	r31
 dde:	9e 3f       	cpi	r25, 0xFE	; 254
 de0:	08 f0       	brcs	.+2      	; 0xde4 <__addsf3x+0x96>
 de2:	b3 cf       	rjmp	.-154    	; 0xd4a <__addsf3+0x1e>
 de4:	93 95       	inc	r25
 de6:	88 0f       	add	r24, r24
 de8:	08 f0       	brcs	.+2      	; 0xdec <__addsf3x+0x9e>
 dea:	99 27       	eor	r25, r25
 dec:	ee 0f       	add	r30, r30
 dee:	97 95       	ror	r25
 df0:	87 95       	ror	r24
 df2:	08 95       	ret

00000df4 <__fp_mpack>:
 df4:	9f 3f       	cpi	r25, 0xFF	; 255
 df6:	31 f0       	breq	.+12     	; 0xe04 <__fp_mpack_finite+0xc>

00000df8 <__fp_mpack_finite>:
 df8:	91 50       	subi	r25, 0x01	; 1
 dfa:	20 f4       	brcc	.+8      	; 0xe04 <__fp_mpack_finite+0xc>
 dfc:	87 95       	ror	r24
 dfe:	77 95       	ror	r23
 e00:	67 95       	ror	r22
 e02:	b7 95       	ror	r27
 e04:	88 0f       	add	r24, r24
 e06:	91 1d       	adc	r25, r1
 e08:	96 95       	lsr	r25
 e0a:	87 95       	ror	r24
 e0c:	97 f9       	bld	r25, 7
 e0e:	08 95       	ret

00000e10 <__udivmodhi4>:
 e10:	aa 1b       	sub	r26, r26
 e12:	bb 1b       	sub	r27, r27
 e14:	51 e1       	ldi	r21, 0x11	; 17
 e16:	07 c0       	rjmp	.+14     	; 0xe26 <__udivmodhi4_ep>

00000e18 <__udivmodhi4_loop>:
 e18:	aa 1f       	adc	r26, r26
 e1a:	bb 1f       	adc	r27, r27
 e1c:	a6 17       	cp	r26, r22
 e1e:	b7 07       	cpc	r27, r23
 e20:	10 f0       	brcs	.+4      	; 0xe26 <__udivmodhi4_ep>
 e22:	a6 1b       	sub	r26, r22
 e24:	b7 0b       	sbc	r27, r23

00000e26 <__udivmodhi4_ep>:
 e26:	88 1f       	adc	r24, r24
 e28:	99 1f       	adc	r25, r25
 e2a:	5a 95       	dec	r21
 e2c:	a9 f7       	brne	.-22     	; 0xe18 <__udivmodhi4_loop>
 e2e:	80 95       	com	r24
 e30:	90 95       	com	r25
 e32:	bc 01       	movw	r22, r24
 e34:	cd 01       	movw	r24, r26
 e36:	08 95       	ret

00000e38 <_exit>:
 e38:	f8 94       	cli

00000e3a <__stop_program>:
 e3a:	ff cf       	rjmp	.-2      	; 0xe3a <__stop_program>
